apiVersion: v1
kind: ConfigMap
metadata:
  name: envvars
data:
  SECURITY_MONKEY_POSTGRES_HOST: "{{ .Values.smConfig.dbHost }}"
  SECURITY_MONKEY_POSTGRES_USER: "{{ .Values.smConfig.dbUser }}"
  SECURITY_MONKEY_POSTGRES_MAIN_DB: "{{ .Values.smConfig.mainDbName }}"
  SECURITY_MONKEY_POSTGRES_DATABASE: "{{ .Values.smConfig.secmonDbName }}"

  SECURITY_MONKEY_REDIS_HOST: "{{ .Values.smConfig.redisHost }}"
  SECURITY_MONKEY_REDIS_DB: "{{ .Values.smConfig.redisDb }}"

  SECURITY_MONKEY_API_PORT: "{{ .Values.smConfig.apiContainerPort }}"

  SECURITY_MONKEY_FQDN: "{{ index .Values.ingress.hosts 0 }}"
  # Must be false if HTTP
  SESSION_COOKIE_SECURE: "True"

  SECURITY_MONKEY_SECURITY_TEAM_EMAIL: "{{ .Values.smConfig.adminTeamEmail }}"
  SECURITY_MONKEY_EMAIL_DEFAULT_SENDER: "{{ .Values.smConfig.adminTeamEmail }}"
  SECURITY_MONKEY_SMTP: "{{ .Values.smConfig.emailUseSMTP }}"
  SECURITY_MONKEY_EMAIL_SERVER: "{{ .Values.smConfig.emailSMTPServer }}"
  SECURITY_MONKEY_SES_REGION: "{{ .Values.smConfig.awsSesRegion }}"

  # SSO
  #SECURITY_MONKEY_ACTIVE_PROVIDERS: "google"
  #SECURITY_MONKEY_GOOGLE_CLIENT_ID: "{{ .Values.smConfig.ssoGoogleClientID }}"
  #SECURITY_MONKEY_GOOGLE_AUTH_ENDPOINT: "{{ .Values.smConfig.ssoGoogleEndPoint }}"
  #SECURITY_MONKEY_GOOGLE_SECRET: ""
  #SECURITY_MONKEY_GOOGLE_HOSTED_DOMAIN: ""{{ .Values.smConfig.ssoGoogleDomain }}""
  #SECURITY_MONKEY_GOOGLE_DOMAIN_WIDE_DELEGATION_KEY_PATH: ""{{ .Values.smConfig.ssoGoogleDelegationKeyPath }}""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-accounts
data:
  aws_accounts.json: |-
    {
        "CloudTrail Logs": {
            "url": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-regions.html",
            "accounts": [
                {
                    "region": "ap-south-1",
                    "account_id": "977081816279"
                },
                {
                    "region": "ap-northeast-1",
                    "account_id": "216624486486"
                },
                {
                    "region": "ap-northeast-2",
                    "account_id": "492519147666"
                },
                {
                    "region": "ap-northeast-3",
                    "account_id": "765225791966"
                },
                {
                    "region": "ap-southeast-1",
                    "account_id": "903692715234"
                },
                {
                    "region": "ap-southeast-2",
                    "account_id": "284668455005"
                },
                {
                    "region": "ca-central-1",
                    "account_id": "819402241893"
                },
                {
                    "region": "eu-central-1",
                    "account_id": "035351147821"
                },
                {
                    "region": "eu-west-1",
                    "account_id": "859597730677"
                },
                {
                    "region": "eu-west-2",
                    "account_id": "282025262664"
                },
                {
                    "region": "eu-west-3",
                    "account_id": "262312530599"
                },
                {
                    "region": "sa-east-1",
                    "account_id": "814480443879"
                },
                {
                    "region": "us-east-1",
                    "account_id": "086441151436"
                },
                {
                    "region": "us-east-2",
                    "account_id": "475085895292"
                },
                {
                    "region": "us-west-1",
                    "account_id": "388731089494"
                },
                {
                    "region": "us-west-2",
                    "account_id": "113285607260"
                }
            ]
        },
        "ELB Logs": {
            "url": "https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html",
            "accounts": [
                {
                    "region": "us-east-1",
                    "account_id": "127311923021"
                },
                {
                    "region": "us-east-2",
                    "account_id": "033677994240"
                },
                {
                    "region": "us-west-1",
                    "account_id": "027434742980"
                },
                {
                    "region": "us-west-2",
                    "account_id": "797873946194"
                },
                {
                    "region": "eu-west-1",
                    "account_id": "156460612806"
                },
                {
                    "region": "eu-west-2",
                    "account_id": "652711504416"
                },
                {
                    "region": "eu-west-3",
                    "account_id": "009996457667"
                },
                {
                    "region": "eu-central-1",
                    "account_id": "054676820928"
                },
                {
                    "region": "ap-northeast-1",
                    "account_id": "582318560864"
                },
                {
                    "region": "ap-northeast-2",
                    "account_id": "600734575887"
                },
                {
                    "region": "ap-northeast-3",
                    "account_id": "383597477331"
                },
                {
                    "region": "ap-southeast-1",
                    "account_id": "114774131450"
                },
                {
                    "region": "ap-southeast-2",
                    "account_id": "783225319266"
                },
                {
                    "region": "sa-east-1",
                    "account_id": "507241528517"
                },
                {
                    "region": "ap-south-1",
                    "account_id": "718504428378"
                },
                {
                    "region": "us-gov-west-1",
                    "account_id": "048591011584"
                },
                {
                    "region": "cn-north-1",
                    "account_id": "638102146993"
                },
                {
                    "region": "cn-northwest-1",
                    "account_id": "037604701340"
                }
            ]
        },
        "RedShift Logs": {
            "url": "https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html",
            "accounts": [
                {
                    "region": "us-east-1",
                    "account_id": "193672423079"
                },
                {
                    "region": "us-east-2",
                    "account_id": "391106570357"
                },
                {
                    "region": "us-west-1",
                    "account_id": "262260360010"
                },
                {
                    "region": "us-west-2",
                    "account_id": "902366379725"
                },
                {
                    "region": "eu-central-1",
                    "account_id": "53454850223"
                },
                {
                    "region": "eu-west-1",
                    "account_id": "210876761215"
                },
                {
                    "region": "eu-west-2",
                    "account_id": "307160386991"
                },
                {
                    "region": "eu-west-3",
                    "account_id": "915173422425"
                },
                {
                    "region": "ca-central-1",
                    "account_id": "907379612154"
                },
                {
                    "region": "ap-northeast-1",
                    "account_id": "404641285394"
                },
                {
                    "region": "ap-northeast-2",
                    "account_id": "760740231472"
                },
                {
                    "region": "ap-south-1",
                    "account_id": "865932855811"
                },
                {
                    "region": "ap-southeast-1",
                    "account_id": "361669875840"
                },
                {
                    "region": "ap-southeast-2",
                    "account_id": "762762565011"
                },
                {
                    "region": "cn-northwest-1",
                    "account_id": "660998842044"
                },
                {
                    "region": "sa-east-1",
                    "account_id": "075028567923"
                }
            ]
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker
data:
  api-init.sh: |-
    #!/bin/bash -e

    # Wait the database
    sleep 10

    echo "Starting API init on $( date )"

    if PGPASSWORD=${SECURITY_MONKEY_POSTGRES_PASSWORD} psql -h ${SECURITY_MONKEY_POSTGRES_HOST:-postgres} -U ${SECURITY_MONKEY_POSTGRES_USER:-postgres} -d ${SECURITY_MONKEY_POSTGRES_MAIN_DB:-postgres} -lqt | cut -d \| -f 1 | grep -qw ${SECURITY_MONKEY_POSTGRES_DATABASE:-secmonkey}
    then
      echo "The database is already present"
    else
      echo "Creating the user: ${SECURITY_MONKEY_POSTGRES_USER:-postgres} on ${SECURITY_MONKEY_POSTGRES_HOST:-postgres}:${SECURITY_MONKEY_POSTGRES_PORT:-5432}:"
      PGPASSWORD=${SECURITY_MONKEY_POSTGRES_PASSWORD} psql -h ${SECURITY_MONKEY_POSTGRES_HOST:-postgres} -p ${SECURITY_MONKEY_POSTGRES_PORT:-5432} \
          -U ${SECURITY_MONKEY_POSTGRES_USER:-postgres} \
          -d ${SECURITY_MONKEY_POSTGRES_MAIN_DB:-postgres} \
          --command "ALTER USER ${SECURITY_MONKEY_POSTGRES_USER:-postgres} with PASSWORD '${SECURITY_MONKEY_POSTGRES_PASSWORD:-securitymonkeypassword}';"

      echo "Creating the ${SECURITY_MONKEY_POSTGRES_DATABASE:-secmonkey} on ${SECURITY_MONKEY_POSTGRES_HOST:-postgres}:${SECURITY_MONKEY_POSTGRES_PORT:-5432} with the ${SECURITY_MONKEY_POSTGRES_USER:-postgres}:"
      PGPASSWORD=${SECURITY_MONKEY_POSTGRES_PASSWORD} createdb -h ${SECURITY_MONKEY_POSTGRES_HOST:-postgres} -p ${SECURITY_MONKEY_POSTGRES_PORT:-5432} \
          -U ${SECURITY_MONKEY_POSTGRES_USER:-postgres} \
          -O ${SECURITY_MONKEY_POSTGRES_USER:-postgres} ${SECURITY_MONKEY_POSTGRES_DATABASE:-secmonkey}

      mkdir -p /var/log/security_monkey/
      touch "/var/log/security_monkey/security_monkey-deploy.log"

      cd /usr/local/src/security_monkey
      monkey db upgrade

      # Add the AWS accounts
      {{- range $key, $val := .Values.smConfig.aws_accounts }}
      monkey add_account_aws --id {{ $val.accountNumber }} --name {{ $val.accountName }} --role_name {{ $val.iamRole }} --canonical_id {{ $val.canonicalId }} --active
      {{- end}}

      # Add the Github accounts
      monkey add_account_github -n jt-github --active --access_token_file /usr/local/src/security_monkey/github.json --id jobteaser

    fi

    # -------------ADD ADDITIONAL MONKEY COMMANDS TO EXECUTE HERE-------------
    # -------------ADD MONKEY COMMANDS ABOVE TO ADD ACCOUNTS AND DO OTHER THINGS-------------

    echo "Completed API init on $( date )"
  api-start.sh: |-
    #!/bin/bash

    # wait the database
    sleep 10

    cd /usr/local/src/security_monkey
    monkey run_api_server -b 0.0.0.0:${SECURITY_MONKEY_API_PORT:-5000}
  scheduler-start.sh: |-
    #!/bin/bash

    # wait 3 minutes so all the underlying services are ready before starting
    sleep 180

    mkdir -p /var/log/security_monkey
    touch /var/log/security_monkey/security_monkey-deploy.log

    cd /usr/local/src/security_monkey

    celery -A security_monkey.task_scheduler.beat.CELERY beat -l ERROR
  worker-start.sh: |-
    #!/bin/bash

    # wait for the scheduler
    sleep 20

    mkdir -p /var/log/security_monkey
    touch /var/log/security_monkey/security_monkey-deploy.log

    cd /usr/local/src/security_monkey
    celery -A celery -A security_monkey.task_scheduler.tasks.CELERY worker -E
  nginx-start.sh: |-
    #!/usr/bin/env bash

    exec nginx
  nginx-conf: |-
    user  nginx;
    worker_processes  1;
    daemon off;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-host-conf
data:
  security-monkey.conf: |-
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header Strict-Transport-Security "max-age=631138519";
    add_header Content-Security-Policy "default-src 'self'; font-src 'self' https://fonts.gstatic.com; script-src 'self' https://ajax.googleapis.com; style-src 'self' https://fonts.googleapis.com;";

    server {
       listen      0.0.0.0:80;

       access_log  /var/log/security_monkey/security_monkey.access.log;
       error_log   /var/log/security_monkey/security_monkey.error.log;

       location ~* ^/(reset|confirm|healthcheck|register|login|logout|api) {
            proxy_read_timeout 120;
            proxy_pass  http://security-monkey-api:5000;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /static {
            rewrite ^/static/(.*)$ /$1 break;
            root /usr/local/src/security_monkey/security_monkey/static;
            index ui.html;
        }

        location / {
            root /usr/local/src/security_monkey/security_monkey/static;
            index ui.html;
        }

    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-env-config
data:
  config-docker.py: |-
    #     Copyright 2014 Netflix, Inc.
    #
    #     Licensed under the Apache License, Version 2.0 (the "License");
    #     you may not use this file except in compliance with the License.
    #     You may obtain a copy of the License at
    #
    #         http://www.apache.org/licenses/LICENSE-2.0
    #
    #     Unless required by applicable law or agreed to in writing, software
    #     distributed under the License is distributed on an "AS IS" BASIS,
    #     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #     See the License for the specific language governing permissions and
    #     limitations under the License.
    # Insert any config items here.
    # This will be fed into Flask/SQLAlchemy inside security_monkey/__init__.py

    import os


    def env_to_bool(input):
        """
            Must change String from environment variable into Boolean
            defaults to True
        """
        if isinstance(input, str):
            if input in ('False', 'false'):
                return False
            else:
                return True
        else:
            return input


    LOG_CFG = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': '%(asctime)s %(levelname)s: %(message)s '
                    '[in %(pathname)s:%(lineno)d]'
            }
        },
        'handlers': {
            'file': {
                # 'class': 'logging.handlers.RotatingFileHandler',
                'class': 'logging.handlers.GroupWriteRotatingFileHandler',
                'level': 'INFO',
                'formatter': 'standard',
                'filename': '/var/log/security_monkey/securitymonkey.log',
                'maxBytes': 10485760,
                'backupCount': 100,
                'encoding': 'utf8'
            },
            'console': {
                'class': 'logging.StreamHandler',
                'level': 'INFO',
                'formatter': 'standard',
                'stream': 'ext://sys.stdout'
            }
        },
        'loggers': {
            'security_monkey': {
                'handlers': ['console'],
                'level': os.getenv('SM_CONSOLE_LOG_LEVEL', 'INFO')
            },
            'apscheduler': {
                'handlers': ['console'],
                'level': os.getenv('SM_APPSCHEDULER_LOG_LEVEL', 'INFO')
            }
        }
    }

    SQLALCHEMY_DATABASE_URI = 'postgresql://%s:%s@%s:%s/%s' % (
        os.getenv('SECURITY_MONKEY_POSTGRES_USER', '{{ .Values.smConfig.dbUser }}'),
        os.getenv('SECURITY_MONKEY_POSTGRES_PASSWORD', 'securitymonkeypassword'),
        os.getenv('SECURITY_MONKEY_POSTGRES_HOST', '{{ .Values.smConfig.dbHost }}'),
        os.getenv('SECURITY_MONKEY_POSTGRES_PORT', 5432),
        os.getenv('SECURITY_MONKEY_POSTGRES_DATABASE', '{{ .Values.smConfig.secmonDbName }}')
    )

    ENVIRONMENT = 'ec2'
    USE_ROUTE53 = False
    FQDN = os.getenv('SECURITY_MONKEY_FQDN', '{{ index .Values.ingress.hosts 0 }}')
    API_PORT = '5000'
    WEB_PORT = '443'
    WEB_PATH = '/static/ui.html'
    FRONTED_BY_NGINX = True
    NGINX_PORT = '443'
    BASE_URL = 'https://{}/'.format(FQDN)

    SECRET_KEY = os.getenv('SECURITY_MONKEY_SECRET_KEY', '<INSERT_RANDOM_STRING_HERE>')

    MAIL_DEFAULT_SENDER = os.getenv('SECURITY_MONKEY_EMAIL_DEFAULT_SENDER', 'securitymonkey@example.com')
    SECURITY_REGISTERABLE = env_to_bool(os.getenv('SECURITY_MONKEY_SECURITY_REGISTERABLE', False))
    SECURITY_CONFIRMABLE = env_to_bool(os.getenv('SECURITY_MONKEY_SECURITY_CONFIRMABLE', False))
    SECURITY_RECOVERABLE = env_to_bool(os.getenv('SECURITY_MONKEY_SECURITY_RECOVERABLE', False))
    SECURITY_PASSWORD_HASH = 'bcrypt'
    SECURITY_PASSWORD_SALT = os.getenv('SECURITY_MONKEY_SECURITY_PASSWORD_SALT', '<INSERT_RANDOM_STRING_HERE>')
    SECURITY_TRACKABLE = True

    SECURITY_POST_LOGIN_VIEW = BASE_URL
    SECURITY_POST_REGISTER_VIEW = BASE_URL
    SECURITY_POST_CONFIRM_VIEW = BASE_URL
    SECURITY_POST_RESET_VIEW = BASE_URL
    SECURITY_POST_CHANGE_VIEW = BASE_URL

    # This address gets all change notifications (i.e. 'securityteam@example.com')
    SECURITY_TEAM_EMAIL = os.getenv('SECURITY_MONKEY_SECURITY_TEAM_EMAIL', [])

    # If you would prefer the email reports to exclude justified issues, set this to False
    EMAIL_AUDIT_REPORTS_INCLUDE_JUSTIFIED = env_to_bool(os.getenv('SECURITY_MONKEY_EMAIL_AUDIT_REPORTS_INCLUDE_JUSTIFIED', True))

    # These are only required if using SMTP instead of SES
    EMAILS_USE_SMTP = env_to_bool(os.getenv('SECURITY_MONKEY_SMTP', False))     # Otherwise, Use SES
    SES_REGION = os.getenv('SECURITY_MONKEY_SES_REGION', 'us-east-1')
    MAIL_SERVER = os.getenv('SECURITY_MONKEY_EMAIL_SERVER', 'smtp.example.com')
    MAIL_PORT = 465
    MAIL_USE_SSL = True
    MAIL_USERNAME = os.getenv('SECURITY_MONKEY_EMAIL_USERNAME', 'username')
    MAIL_PASSWORD = os.getenv('SECURITY_MONKEY_EMAIL_PASSWORD', 'password')

    WTF_CSRF_ENABLED = env_to_bool(os.getenv('SM_WTF_CSRF_ENABLED', True))
    # Checks Referer Header. Set to False for API access.
    WTF_CSRF_SSL_STRICT = env_to_bool(os.getenv('SM_WTF_CSRF_SSL_STRICT', True))
    WTF_CSRF_METHODS = ['DELETE', 'POST', 'PUT', 'PATCH']

    # "NONE", "SUMMARY", or "FULL"
    SECURITYGROUP_INSTANCE_DETAIL = 'FULL'

    # SSO SETTINGS:
    ACTIVE_PROVIDERS = []  # "ping", "google", "okta" or "onelogin"
    if os.getenv('SECURITY_MONKEY_ACTIVE_PROVIDERS'):
        ACTIVE_PROVIDERS = [ os.getenv('SECURITY_MONKEY_ACTIVE_PROVIDERS') ]

    PING_NAME = ''  # Use to override the Ping name in the UI.
    PING_REDIRECT_URI = "{BASE}api/1/auth/ping".format(BASE=BASE_URL)
    PING_CLIENT_ID = ''  # Provided by your administrator
    PING_AUTH_ENDPOINT = ''  # Often something ending in authorization.oauth2
    PING_ACCESS_TOKEN_URL = ''  # Often something ending in token.oauth2
    PING_USER_API_URL = ''  # Often something ending in idp/userinfo.openid
    PING_JWKS_URL = ''  # Often something ending in JWKS
    PING_SECRET = ''  # Provided by your administrator

    GOOGLE_CLIENT_ID = os.getenv('SECURITY_MONKEY_GOOGLE_CLIENT_ID', '')
    GOOGLE_AUTH_ENDPOINT = os.getenv('SECURITY_MONKEY_GOOGLE_AUTH_ENDPOINT', '')
    GOOGLE_SECRET = os.getenv('SECURITY_MONKEY_GOOGLE_SECRET', '')
    GOOGLE_HOSTED_DOMAIN = os.getenv('SECURITY_MONKEY_GOOGLE_HOSTED_DOMAIN', '') # Verify that token issued by comes from domain
    # Details about domain-wide-delegation https://developers.google.com/admin-sdk/directory/v1/guides/delegation
    GOOGLE_DOMAIN_WIDE_DELEGATION_KEY_PATH = os.getenv('SECURITY_MONKEY_GOOGLE_DOMAIN_WIDE_DELEGATION_KEY_PATH', '') # path to service account key with enabled domain wide delegation
    GOOGLE_ADMIN_ROLE_GROUP_NAME = '' # Google group name which should map to security-monkey role Admin
    GOOGLE_AUTH_API_METHOD = 'People' # alternative 'Directory' to use Google SSO against Directory API
    GOOGLE_DOMAIN_WIDE_DELEGATION_SUBJECT = '' # perform google directory api calls as the this subject

    OKTA_NAME = os.getenv('SECURITY_MONKEY_OKTA_NAME', 'Okta')   # Used to override the Okta name in the UI.
    OKTA_AUTH_SERVER = os.getenv('SECURITY_MONKEY_OKTA_AUTH_SERVER', 'default')   # Your Okta Authentication Server name, in no custom this is likely 'default'.
    OKTA_BASE_URL = os.getenv('SECURITY_MONKEY_OKTA_BASE_URL', '')   # Your Okta account endpoint
    OKTA_AUTH_ENDPOINT = '{OKTA_BASE}/oauth2/{AUTH_SERVER}/v1/authorize'.format(OKTA_BASE=OKTA_BASE_URL, AUTH_SERVER=OKTA_AUTH_SERVER)
    OKTA_TOKEN_ENDPOINT = '{OKTA_BASE}/oauth2/{AUTH_SERVER}/v1/token'.format(OKTA_BASE=OKTA_BASE_URL, AUTH_SERVER=OKTA_AUTH_SERVER)
    OKTA_USER_INFO_ENDPOINT = '{OKTA_BASE}/oauth2/{AUTH_SERVER}/v1/userinfo'.format(OKTA_BASE=OKTA_BASE_URL, AUTH_SERVER=OKTA_AUTH_SERVER)
    OKTA_JWKS_URI = '{OKTA_BASE}/oauth2/{AUTH_SERVER}/v1/keys'.format(OKTA_BASE=OKTA_BASE_URL, AUTH_SERVER=OKTA_AUTH_SERVER)
    OKTA_CLIENT_ID = os.getenv('SECURITY_MONKEY_OKTA_CLIENT_ID', '')   # Retrieved from the Okta Admin panel, under the Application.
    OKTA_CLIENT_SECRET = os.getenv('SECURITY_MONKEY_OKTA_CLIENT_SECRET', '')   # Retrieved from the Okta Admin panel, under the Application.
    OKTA_REDIRECT_URI = '{BASE}/api/1/auth/okta'.format(BASE=BASE_URL)
    OKTA_DEFAULT_ROLE = os.getenv('SECURITY_MONKEY_OKTA_DEFAULT_ROLE', 'View')

    ONELOGIN_APP_ID = os.getenv('SECURITY_MONKEY_ONELOGIN_APP_ID', '<APP_ID>')  # OneLogin App ID provider by your administrator
    ONELOGIN_EMAIL_FIELD = os.getenv('SECURITY_MONKEY_ONELOGIN_EMAIL_FIELD', 'User.email')  # SAML attribute used to provide email address
    ONELOGIN_DEFAULT_ROLE = 'View'  # Default RBAC when user doesn't already exist
    ONELOGIN_HTTPS = True  # If using HTTPS strict mode will check the requests are HTTPS
    ONELOGIN_IDP_CERT = os.getenv('SECURITY_MONKEY_ONELOGIN_IDP_CERT', '<IDP_CERT>')
    ONELOGIN_USE_CUSTOM = os.getenv('SECURITY_MONKEY_ONELOGIN_USE_CUSTOM', False)
    if not ONELOGIN_USE_CUSTOM:
        ONELOGIN_ENTITY_ID = "https://app.onelogin.com/saml/metadata/{APP_ID}".format(APP_ID=ONELOGIN_APP_ID)
        ONELOGIN_SSO_URL = "https://app.onelogin.com/trust/saml2/http-post/sso/{APP_ID}".format(APP_ID=ONELOGIN_APP_ID)
        ONELOGIN_SLO_URL = "https://app.onelogin.com/trust/saml2/http-redirect/slo/{APP_ID}".format(APP_ID=ONELOGIN_APP_ID)
    else:
        ONELOGIN_ENTITY_ID = os.getenv('SECURITY_MONKEY_ONELOGIN_ENTITY_ID')
        ONELOGIN_SSO_URL = os.getenv('SECURITY_MONKEY_ONELOGIN_SSO_URL')
        ONELOGIN_SLO_URL = os.getenv('SECURITY_MONKEY_ONELOGIN_SLO_URL')
    ONELOGIN_SETTINGS = {
        # If strict is True, then the Python Toolkit will reject unsigned
        # or unencrypted messages if it expects them to be signed or encrypted.
        # Also it will reject the messages if the SAML standard is not strictly
        # followed. Destination, NameId, Conditions ... are validated too.
        "strict": True,

        # Enable debug mode (outputs errors).
        "debug": False,

        # Service Provider Data that we are deploying.
        "sp": {
            # Identifier of the SP entity  (must be a URI)
            "entityId": "{BASE}metadata/".format(BASE=BASE_URL),
            # Specifies info about where and how the <AuthnResponse> message MUST be
            # returned to the requester, in this case our SP.
            "assertionConsumerService": {
                # URL Location where the <Response> from the IdP will be returned
                "url": "{BASE}api/1/auth/onelogin?acs".format(BASE=BASE_URL),
                # SAML protocol binding to be used when returning the <Response>
                # message. OneLogin Toolkit supports this endpoint for the
                # HTTP-POST binding only.
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
            },
            # If you need to specify requested attributes, set a
            # attributeConsumingService. nameFormat, attributeValue and
            # friendlyName can be omitted
            #"attributeConsumingService": {
            #        "ServiceName": "SP test",
            #        "serviceDescription": "Test Service",
            #        "requestedAttributes": [
            #            {
            #                "name": "",
            #                "isRequired": False,
            #                "nameFormat": "",
            #                "friendlyName": "",
            #                "attributeValue": ""
            #            }
            #        ]
            #},
            # Specifies info about where and how the <Logout Response> message MUST be
            # returned to the requester, in this case our SP.
            "singleLogoutService": {
                # URL Location where the <Response> from the IdP will be returned
                "url": "{BASE}api/1/auth/onelogin?sls".format(BASE=BASE_URL),
                # SAML protocol binding to be used when returning the <Response>
                # message. OneLogin Toolkit supports the HTTP-Redirect binding
                # only for this endpoint.
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            },
            # Specifies the constraints on the name identifier to be used to
            # represent the requested subject.
            # Take a look on src/onelogin/saml2/constants.py to see the NameIdFormat that are supported.
            "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
            # Usually x509cert and privateKey of the SP are provided by files placed at
            # the certs folder. But we can also provide them with the following parameters
            "x509cert": "",
            "privateKey": ""
        },

        # Identity Provider Data that we want connected with our SP.
        "idp": {
            # Identifier of the IdP entity  (must be a URI)
            "entityId": ONELOGIN_ENTITY_ID,
            # SSO endpoint info of the IdP. (Authentication Request protocol)
            "singleSignOnService": {
                # URL Target of the IdP where the Authentication Request Message
                # will be sent.
                "url": ONELOGIN_SSO_URL,
                # SAML protocol binding to be used when returning the <Response>
                # message. OneLogin Toolkit supports the HTTP-Redirect binding
                # only for this endpoint.
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            },
            # SLO endpoint info of the IdP.
            "singleLogoutService": {
                # URL Location of the IdP where SLO Request will be sent.
                "url": ONELOGIN_SLO_URL,
                # SAML protocol binding to be used when returning the <Response>
                # message. OneLogin Toolkit supports the HTTP-Redirect binding
                # only for this endpoint.
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
            },
            # Public x509 certificate of the IdP
            "x509cert": ONELOGIN_IDP_CERT
        }
    }

    from datetime import timedelta
    PERMANENT_SESSION_LIFETIME=timedelta(minutes=60)
    SESSION_REFRESH_EACH_REQUEST=True
    SESSION_COOKIE_SECURE=env_to_bool(os.getenv('SESSION_COOKIE_SECURE', True))
    SESSION_COOKIE_HTTPONLY=True
    PREFERRED_URL_SCHEME='https'

    REMEMBER_COOKIE_DURATION=timedelta(minutes=60)  # Can make longer if you want remember_me to be useful.
    REMEMBER_COOKIE_SECURE=True
    REMEMBER_COOKIE_HTTPONLY=True

    # Header auth allows you to trust a header set by a reverse proxy to
    # authenticate the current user. This is useful if you have an authn
    # wall in front of your intranet that already knows the identity of
    # the requester and can pass it along to Security Monkey.
    USE_HEADER_AUTH=env_to_bool(os.getenv("SECURITY_MONKEY_USE_HEADER_AUTH", False))
    HEADER_AUTH_USERNAME_HEADER=os.getenv("SECURITY_MONKEY_HEADER_AUTH_USERNAME_HEADER", "Remote-User")
    HEADER_AUTH_GROUPS_HEADER=os.getenv("SECURITY_MONKEY_HEADER_AUTH_GROUPS_HEADER")

    # Log SSL Cert SubjectAltName errors
    LOG_SSL_SUBJ_ALT_NAME_ERRORS = True
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: celery
data:
  celeryconfig.py: |-
    """
    .. module: celeryconfig
        :platform: Unix
        :synopsis: Use this file to set up the Celery configuration for task scheduling.

    .. version:: $$VERSION$$
    .. moduleauthor:: Mike Grima <mgrima@netflix.com>

    """
    # Broker source: Place yours here:
    import os

    broker_url = 'redis://{}/{}'.format(
        os.getenv('SECURITY_MONKEY_REDIS_HOST', 'redis'),
        os.getenv('SECURITY_MONKEY_REDIS_DB', '0')
    )

    # Loglevel
    loglevel = "ERROR"

    # List of modules to import when the Celery worker starts.
    imports = ('security_monkey.task_scheduler.tasks',)

    # How many processes per worker instance?
    worker_concurrency = 10

    timezone = "UTC"
    enable_utc = True

    ###########################
    # IMPORTANT: This helps avoid memory leak issues - do not change this number!
    worker_max_tasks_per_child = 1
    ############################
