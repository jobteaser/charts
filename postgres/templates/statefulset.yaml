---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "postgres.fullname" . }}
  labels:
    app: {{ template "postgres.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "postgres.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "postgres.fullname" . }}
        release: {{ .Release.Name }}
        tier: backend
        component: db
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      - name: postgres
        image: "{{ .Values.image }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        ports:
        - containerPort: 5432
          name: database
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: {{ template "postgres.fullname" . }}
          mountPath: /var/lib/postgresql/data
          subPath: {{ default "postgresql-db" .Values.persistence.subpath | quote }}
        {{- else }}
        - name: empty-data
          mountPath: /var/lib/postgresql/data
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: POSTGRES_USER
          value: {{ default "postgres" .Values.postgresUser | quote }}
        - name: PGUSER
          value: {{ default "postgres" .Values.postgresUser | quote }}
        - name: POSTGRES_DB
          value: {{ default "postgres" .Values.postgresDatabase | quote }}
        {{- if and .Values.secret.enabled }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.secret.secretName }}
              key: {{ .Values.secret.postgresPassword }}
        {{- end }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 7
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
      {{- if not .Values.persistence.enabled }}
      volumes:
      - name: empty-data
        emptyDir: {}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "postgres.fullname" . }}
      labels:
        app: {{ template "postgres.fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    {{- if .Values.persistence.annotations }}
      annotations:
    {{ toYaml .Values.persistence.annotations | indent 10 }}
    {{- end }}
    spec:
      accessModes:
      - {{ .Values.persistence.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
      storageClassName: {{ .Values.persistence.storageClass }}
  {{- end }}
